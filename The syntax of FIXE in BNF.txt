The syntax of FIXE in Backus-Naur Form

	?   -> means option
	[]  -> brackets enclose one or more optional items
	{}  -> enclose two or more items, one of wich is required
	|   -> separates alternatives within brackets or braces
	... -> show that the preceding element can be repeated

Based on the syntax of C in Backus-Naur Form
https://cs.wmich.edu/~gupta/teaching/cs4850/sumII06/The%20syntax%20of%20C%20in%20Backus-Naur%20form.htm

<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= def <identifier> <declarator> : <declaration-specifier-list> <compound-statement>

<declaration-specifier-list> ::= <declaration-specifier>
                               | <declaration-specifier-list> , <declaration-specifier> , ...

<declaration-specifier> ::= <storage-class-specifier>
                          | <type-specifier>

<storage-class-specifier> ::= register
                            | typedef

<type-specifier> ::= void
                   | int
                   | bool
                   | <unsigned>
                   | <struct-specifier>
                   | <vector-specifier>

<vector-specifier> := vector [<expression>] of <type-specifier>
                    | <vector-specifier> of vector [<expression>] of <type-specifier>

<unsigned> := unsigned bits [<expression>]

<struct-specifier> ::= typedef <identifier> <assigment-operator> struct [ <statement> ]

<declarator> ::= <direct-declarator> 

<direct-declarator> ::= <identifier>
                      | (<declarator>) 
                      | <direct-declarator>  (<parameter-type-list>) ------> para a passagem de argumentos a funcao
                      | <direct-declarator>  ({<identifier>}*) ------> para a passagem de argumentos a funcao do tipo void
                      | <direct-declarator>  (<constant-expression>) ------> para a passagem de argumentos a funcao do tipo void

<constant-expression> ::= <logical-or-expression>

<logical-or-expression> ::= <logical-and-expression>
                          | <logical-or-expression> || <logical-and-expression>

<logical-and-expression> ::= <relational-expression>
                            | <logical-and-expression> && <relational-expression>

<relational-expression> ::= <additive-expression>
                          | <relational-expression> < <additive-expression> 
                          | <relational-expression> > <additive-expression> 

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> + <multiplicative-expression>
                        | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> * <cast-expression>
                              | <multiplicative-expression> / <cast-expression>

<cast-expression> ::= <unary-expression>
                    | (<type-specifier>) <cast-expression>

<unary-expression> ::= <postfix-expression>
	
<postfix-expression> ::= <primary-expression> ---> cast (int)i
                       | <postfix-expression> <expression> ---> cast (int) i*5
                       | <postfix-expression> . <identifier> ---> aceder a variaveis da estrutura

<primary-expression> ::= <identifier>
                       | <constant>
                       | ( <expression> )

<constant> ::= <integer-constant>
             | <boolean-constant>

<expression> ::= <assignment-expression>
               | <expression> , <assignment-expression>

<assignment-expression> ::= <constant-expression>
                          | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= :=

<unary-operator> ::= *
                   | +
                   | -
                   | !

<parameter-type-list> ::= <parameter-list>
                        | <parameter-list> , ...

<parameter-list> ::= <parameter-declaration>
                   | <parameter-list> , <parameter-declaration>

<parameter-declaration> ::= <declarator> : <declaration-specifier> ----> a : int
                          | <declarator>


<typedef-name> ::= <identifier>

<declaration> ::= def <identifier> {<declaration-specifier>} {<init-declarator>}*

<init-declarator> ::= <declarator>
                    | <declarator> := <initializer>

<initializer> ::= <assignment-expression>
                | { <initializer-list> }
                | { <initializer-list> , }

<initializer-list> ::= <initializer>
                     | <initializer-list> , <initializer>

<compound-statement> ::= { {<declaration>}* {<statement>}* }

<statement> ::= <compound-statement> 
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>

<selection-statement> ::= if ( <expression> ) <statement>
                        | if ( <expression> ) <statement> else <statement>

<iteration-statement> ::= while ( <expression> ) <statement>
                        | seq <init-declarator> to <expression> by <expression>

<jump-statement> ::= return {<expression>}? ;
