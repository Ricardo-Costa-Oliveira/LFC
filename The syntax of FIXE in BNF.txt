The syntax of FIXE in Backus-Naur Form

<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= {<declaration-specifier>}* <declarator> {<declaration>}* <compound-statement>

<declaration-specifier> ::= <storage-class-specifier>
                          | <type-specifier>
                          | <type-qualifier>

<storage-class-specifier> ::= 

<type-specifier> ::= void
                   | int
                   | unsigned
                   | <struct-or-union-specifier>
                   | <typedef-name>

<struct-or-union-specifier> ::= struct [ <identifier> { {<struct-declaration>}+ } ]
                              | <struct-or-union> { {<struct-declaration>}+ }
                              | <struct-or-union> <identifier>


<struct-or-union> ::= struct

<struct-declaration> ::= 

<specifier-qualifier> ::= 

<struct-declarator-list> ::= 

<struct-declarator> ::= 

<declarator> ::= 

<pointer> ::= * 

<type-qualifier> ::= const
                   | volatile ????

<direct-declarator> ::=

<constant-expression> ::= <conditional-expression>

<conditional-expression> ::= 

<logical-or-expression> ::= 

<logical-and-expression> ::= 

<inclusive-or-expression> ::= 

<exclusive-or-expression> ::= 

<and-expression> ::= 

<equality-expression> ::= 

<relational-expression> ::= 

<shift-expression> ::= 

<additive-expression> ::= 

<multiplicative-expression> ::=

<cast-expression> ::= 

<unary-expression> ::= 

<postfix-expression> ::= 

<primary-expression> ::= <identifier>
                       | <constant>
                       | <string> ?????
                       | ( <expression> )

<constant> ::= <integer-constant>
             | <character-constant>   ?????
             | <floating-constant>    ?????
             | <enumeration-constant> ?????

<expression> ::= <assignment-expression>
               | <expression> , <assignment-expression>

<assignment-expression> ::= <conditional-expression>
                          | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= :=

<unary-operator> ::= *
                   | +
                   | -
                   | !

<type-name> ::= 

<parameter-type-list> ::= <parameter-list>
                        | <parameter-list> , ...
<parameter-list> ::= 

<parameter-declaration> ::= 

<abstract-declarator> ::= 

<direct-abstract-declarator> ::=  

<enum-specifier> ::= 

<enumerator-list> ::= 

<enumerator> ::= 

<typedef-name> ::= 

<declaration> ::= 

<init-declarator> ::= 

<initializer> ::= 

<initializer-list> ::= 

<compound-statement> ::= 

<statement> ::= <expression-statement> ?????
              | <compound-statement> ?????
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>

<expression-statement> ::= 

<selection-statement> ::= if ( <expression> ) <statement>
                        | if ( <expression> ) <statement> else <statement>

<iteration-statement> ::= while ( <expression> ) <statement>
                        | seq <?????INIT_IDENTIFIER????> to <expression> by <expression>

<jump-statement> ::= return {<expression>}? ;


This grammar was adapted from Section A13 of The C programming language, 2nd edition, by Brian W. Kernighan and Dennis M. Ritchie,Prentice Hall, 1988. 
